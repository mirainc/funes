## Cache configuration
proxy_cache_path ${CONTENT_CACHE_DIR} levels=1:2 keys_zone=fwd_proxy_cache:${CONTENT_CACHE_KEYS_ZONE} max_size=${CONTENT_CACHE_SIZE} inactive=365d use_temp_path=off;
proxy_cache_convert_head off;
# Normally, nginx does not support caching OPTIONS requests because the HTTP standard says OPTIONS is not cacheable.
# However, we need to be able to cache OPTIONS requests, since browsers use OPTIONS responses for CORS security policies.
# This requires applying the patch allow_options_cache.patch in this repository.
proxy_cache_methods GET HEAD OPTIONS;
proxy_cache_lock on;

## Ignore headers that make requests uncacheable
proxy_ignore_headers Set-Cookie Vary X-Accel-Buffering;
proxy_buffering on;

resolver ${NAMESERVER} ipv6=off valid=10s;

# ====================== Expiration Rules ====================== #

## Configures expiration for upstream content based on content type.
map $upstream_http_content_type $content_type_expiry {
    default                                 5s;
    'application/json'                      5s;
    'application/pdf'                       max;            # max means 10 years to nginx
    'application/octet-stream'              max;
    'binary/octet-stream'                   max;
    'image/jpeg'                            max;
    'image/gif'                             max;
    'image/png'                             max;
    'image/bmp'                             max;
    'image/webp'                            max;
    'video/webm'                            max;
    'video/ogg'                             max;
    'video/mp4'                             max;
    'application/binary'                    -1s;            # used by HLS streams
    '~*mpegurl'                             -1s;
}

map $host $host_expiry {
    default                     $content_type_expiry;
    # foo.com                   30d;                        # example of expiry by host
    "~*uplynk.com"              -1s;                        # known HLS stream provider
}

map $uri $uri_expiry {
    default                     $host_expiry;
    # "~*.gifv"                 30d;                        # example of expiry by uri/file extension
}

map $request_method $cache_expiry {
    default                     $uri_expiry;
    'HEAD'                      5s;
    'OPTIONS'                   5s;
}

# ====================== End Expiration Rules ====================== #


# ====================== Client Proxy ====================== #

##
## Proxy connected to by clients (i.e. Chrome), usually using port 3128.
##
## Also functions as a transparent proxy using port 80 (HTTP) and 443 (HTTPS).
##

## Header to indicate proxy usage
map $scheme $proxied_by_value {
    "http"    "funes";
    "https"   "funes-ssl";
}

## Proxy destination based on scheme
map $scheme $normal_proxy_cache_backend {
    "http"      http://127.0.0.1:3129;
    "https"     http://127.0.0.1:3130;
}

map $scheme $range_proxy_cache_backend {
    "http"      http://127.0.0.1:4481;
    "https"     http://127.0.0.1:4444;
}

map $http_range $proxy_cache_backend {
    default     $normal_proxy_cache_backend;
    "~bytes=*"  $range_proxy_cache_backend;
}

server {
    include ./transparent_proxy/*.conf;
    include ./restrict_local/*.conf;
    listen 127.0.0.1:444 ssl;
    listen 127.0.0.1:3128;

    add_header Funes-Proxied-By $proxied_by_value;

    proxy_connect;
    proxy_connect_allow                 443 563;

    # read/send_timeout are used to keep the connection open to the client
    # even if no data is sent on the proxy. This defaults to 60s if not set.
    # proxy_connect_connect_timeout       60s;
    # proxy_connect_read_timeout          60s;
    # proxy_connect_send_timeout          60s;
    proxy_connect_address               127.0.0.1:444;

    location / {
        proxy_set_header Host            $http_host;
        proxy_set_header X-Forwarded-For $remote_addr;

        proxy_pass $proxy_cache_backend;
    }
}

# ====================== End Client Proxy ====================== #


# ====================== General Cache Proxy ====================== #

map $server_port $proxy_rewrite_backend {
    3129    http://127.0.0.1:4480;
    3130    http://127.0.0.1:4443;
}

map $server_port $proxy_method {
    3129    "http";
    3130    "https";
}

server {
    include ./restrict_local/*.conf;
    listen 127.0.0.1:3129;
    listen 127.0.0.1:3130;

    add_header Funes-Cache-Status $upstream_cache_status;
    add_header Funes-Upstream-Status $upstream_status;

    location / {
        proxy_set_header Host            $http_host;
        proxy_set_header X-Forwarded-For $remote_addr;

        proxy_pass $proxy_rewrite_backend;
        proxy_cache fwd_proxy_cache;
        proxy_cache_key $proxy_method$request_method$http_host$request_uri;

        ## This config serves stale responses when updating the cache.
        ## Use when immediate updates are not necessary.
        # proxy_cache_use_stale error timeout updating;
        # proxy_cache_background_update on;

        ## This config attempts to serve updated responses immediately,
        ## serving a stale response if there is an error/timeout.
        ## Use when immediate updates are preferred.
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504 http_403 http_404 http_429;
        proxy_cache_background_update off;

        # These timeouts can be tuned (read nginx documentation for more info)
        # proxy_connect_timeout 1s;
        # proxy_read_timeout 60s;
        # proxy_send_timeout 60s;

        ## Set valid cached response types.
        ## The time here is overridden by our injected `expires $cache_expiry` header.
        proxy_cache_valid 200 206 1s;

        access_log ${LOG_DIR}/cache.log proxy_cache;
    }
}

# ====================== End General Cache Proxy ====================== #


# ====================== Forward Proxies ====================== #

##
## HTTP and HTTPS forward proxies. These proxy requests to external upstreams
## and set custom expiration headers to allow granular expiration rules.
##

map $server_port $forward_proxied_by_value {
    4480 "funes-forward";
    4443 "funes-ssl-forward";
}

map $server_port $forward_proxy_scheme {
    4480 http;
    4443 https;
}

server {
    include ./restrict_local/*.conf;
    listen 127.0.0.1:4480;
    listen 127.0.0.1:4443;

    add_header Funes-Proxied-By $forward_proxied_by_value;

    include ./forward_cache_expiry_override/*.conf;

    location / {
        proxy_pass $forward_proxy_scheme://$http_host$request_uri;

        proxy_ssl_verify on;
        proxy_ssl_verify_depth ${SSL_VERIFY_DEPTH};
        proxy_ssl_trusted_certificate ./cacert.pem;
        proxy_ssl_server_name on;
    }
}


# ====================== End Forward Proxies ====================== #


# ====================== Range Request Cache Proxy ====================== #

map $server_port $forward_range_proxied_by_value {
    4481 "funes-range-forward";
    4444 "funes-ssl-range-forward";
}

map $server_port $forward_range_proxy_scheme {
    4481 http;
    4444 https;
}

server {
    include ./restrict_local/*.conf;
    listen 127.0.0.1:4481;
    listen 127.0.0.1:4444;

    add_header Funes-Proxied-By $forward_range_proxied_by_value;

    ## Settings for handling range requests
    slice 1m;
    proxy_set_header  Range $slice_range;

    include ./range_cache_expiry_override/*.conf;

    location / {
        add_header Funes-Cache-Status $upstream_cache_status;

        proxy_pass $forward_range_proxy_scheme://$http_host$request_uri;
        proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie Vary;
        proxy_cache fwd_proxy_cache;
        proxy_cache_key $forward_range_proxy_scheme$request_method$http_host$request_uri$slice_range;
        proxy_cache_use_stale error timeout;
        proxy_cache_background_update off;
        proxy_cache_valid 200 206 3650d;

        proxy_ssl_verify on;
        proxy_ssl_verify_depth ${SSL_VERIFY_DEPTH};
        proxy_ssl_trusted_certificate ./cacert.pem;
        proxy_ssl_server_name on;

        access_log ${LOG_DIR}/range_cache.log range_cache;
    }
}

# ====================== End Range Request Proxy/Cache ====================== #
